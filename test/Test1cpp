// vim: set ft=cpp;

#ifndef SP_TESSSST
#define SP_TESSSST
#endif

#include <iostream>
#include <string>
#include <vector>

#define ASD class

#define SP_DDD_CLASS                                                           \
  ddd {                                                                        \
  }

#define NOTHING

namespace ns {
namespace ns1 { //
}
namespace ns11 { //
}
namespace {
//
}
}

namespace dd { /**/
namespace xx {
class TestBase { //
};
}
}
using namespace dd::xx;
using dd::xx::TestBase;
// using Meter = NamedType<double, struct MeterTag>;

class /**/ TestBase2 /*:*/ /**/ /*TestBase*/ /**/ { //
                                                    //}
/**/}/**/;

class TestSub : public virtual TestBase {
  //};
};

class TestSub1 : virtual private TestBase {};

class TestSub2 : virtual private TestBase {
  /*};*/
};

class TestSub3 : private TestBase {
  //
};

class TestSub4 : virtual TestBase {
  //
};

class TestSub5 : TestBase {};

class TestSub6 : public virtual TestBase, virtual public TestBase2 {
  //};
};

class TestSub7 : virtual private TestBase, TestBase2 {};

class TestSub8 : virtual private TestBase, protected TestBase2 {
  /*};*/
};

class TestSub9 : private TestBase, TestBase2 {
  //
};

class TestSub10 : virtual TestBase, TestBase2 {
  //
};

class TestSub11 : TestBase, TestBase2 {};

class TestSub12 /*:*/ /*TestBase,*/ // TestBase2
{};

template <typename T>
class TestSub13 {};

template <typename = int>
class TestSub14 {};

template <typename T, typename B>
class TestSub15 {};

template <typename T = int>
class TestSub16 {};

template <typename T, typename B = int>
class TestSub17 {};

namespace asd {
template <int s = 1>
class TestSub18 {};

namespace ns1 {

ASD TestDefine{};
}

namespace ns2 {
class SP_DDD_CLASS;
}
}

NOTHING class NOTHING nothing {
  NOTHING
  NOTHING NOTHING
} NOTHING;
NOTHING

namespace sd {
template <typename T = int>
class TemplatedClass {};
}

template <sd::TemplatedClass<int> &asd>
class TemplatedClassRef {};

template <int (&pa)[5]>
struct CArrayConstantTemplate {};

template <int asd = 3>
class templatedclassint {};

template <int *asd>
class templatedclassPtr {
  int (&pa)[5];
  void (*pf)(int, int *, int a, sd::TemplatedClass<int>, int (&pa)[5]);
};

template <int **asd>
class templatedclassPtrPtr {};

enum class EnumType1 : int {
  ONE,
  TWO, //
  THREE = 3,
  FOUR
};

// template <EnumType1 e = EnumType1::ONE>
// class templatedclassEnum {};

template <int (&pa)[5]>
struct TemplateClassArrayTypeParam {};

template <void (*pf)(int, int *, int a, sd::TemplatedClass<int>)>
struct TemplateClassFunctionPointerTypeParam {};

extern void extFunc0(int **f);
extern void extFunc1(int **f, int &&);

// static void staticFunc0(int **f);
// static void staticFunc1(int **f, int &&);

template <class Axx, std::size_t Nexx>
class TestClassFunctions {
  int function0();
  void function1();

public:
  void function2(int);
  void function3(int f);

private:
  void function4(int f, int);
  void function5(int, int f);

  void function6(int *f, int *);

protected:
protected:
public:
  void function7(int &, int *f);

protected:
  template <typename T = int>
  void tempFunc(T f, T &f1, const T &f2, T *f3, const T *f4);

  TestClassFunctions();
  ~TestClassFunctions();

  TestClassFunctions(const TestClassFunctions &o);
  TestClassFunctions(TestClassFunctions &&o);

  TestClassFunctions &operator=(const TestClassFunctions &o);
  TestClassFunctions &operator=(TestClassFunctions &&);

  TestClassFunctions &operator=(int &&) = delete;

  bool operator==(const TestClassFunctions &) const noexcept;

  const int &operator/**/[/*[]*/] /*(String)*/(int i) const;

private:
};

template <class Axx, std::size_t Nexx>
TestClassFunctions<Axx, Nexx>::TestClassFunctions() {
}

template <class Axx, std::size_t Nexx>
TestClassFunctions<Axx, Nexx>::~TestClassFunctions() {
}

// template <class Axx, std::size_t Nexx>
// bool TestClassFunctions<Axx, Nexx>::operator==(const TestClassFunctions &)
// const
//     noexcept {
//   return false;
// }

template <class Axx, std::size_t Nexx>
void TestClassFunctions<Axx, Nexx>::function2(int) {
}

// fp return fp
// int * (*(*(*foo)(char))(double))[3];

template <typename T>
struct SingleTemplate {};

// template <typename K, typename V, template <typename> typename C =
// SingleTemplate>
class MapTemplateStuff {
  // C<K> key;
  // C<V> value;
};

namespace spec {
template <typename T>
class A {
  int x;
}; // primary template

template <class T>
class A<T *> {
  long x;
}; // partial specializatio

class sda : public A<int *> {};

} // namespace spec

// auto fp11() -> void(*)(const std::string&);
// int printf(const char* fmt, ...);
// int fwith_stuff(int a = 7, int *p = nullptr, int(#<{(||)}>#
// *(*x)(double)#<{(||)}>#)[3] = nullptr);
int fwith_stuff2(int (&arr)[1024]);

union UnionDestrcutor {
  std::string str;
  std::vector<int> vec;
  ~UnionDestrcutor();

  // ~UnionDestrcutor() {
  // }
};

// template <typename T1, typename T2>
// static auto func(T1 o, T2 t) -> decltype(T1(0) + T2(0)) {
//   return o + t;
// }

// template <typename U, typename T,
//           typename = decltype(static_cast<T>(std::declval<U>()))>
// T optional<T>::value_or(U &&fallback);

// template<typename Lambda>
// using expression_type = decltype(std::declval<Lambda>()());

// #define LAZY(Expr) lazy_eval([&]() -> decltype((Expr)) { return Expr; })
//

// template <typename T, T *func>
// struct function_caller {
//   template <typename... Us>
//   auto operator()(Us &&... us) const
//       -> decltype(func(std::forward<Us...>(us...))) {
//     return func(std::forward<Us...>(us...));
//   }
// };
//
// int main() {
//   using good = unique_ptr<FILE, function_caller<int(FILE *), &fclose>>;
//
//   std::vector<good> files;
//   files.reserve(64);
//   std::generate_n(std::back_inserter(files), 64, [n = 1]() mutable {
//     auto name = std::to_string(n++) + ".txt";
//     return good{fopen(name.c_str(), "w")};
//   });
// }

// template <auto func>
// struct function_caller {
//   template <typename... Us>
//   auto operator()(Us &&... us) const {
//     return func(std::forward<Us...>(us...));
//   }
// };

// template<typename A, typename B>
// auto add(A a, B b) {
//     return a + b;
// }

// int mainx() {
////     struct {} someVar;
//
//     add(someVar, 7);
// }

// template<typename A, typename B>
// auto add(A a, B b) -> decltype(a + b) {
//     return a + b;
// }
// void add(...) = delete;
// template<typename T = void>
// void add(...) {
//     static_assert(!std::is_same<T, T>::value,
//         "Cannot add! You must send types that can add together."
//     );
// }

// template <unsigned int N>
// struct factorial
// {
//   enum
//   {
//     value = N * factorial<N-1>:: value;
//   };
// };

// template <>
// struct factorial <0>
// {
//   enum { value = 1 };
// };

// template< size_t index_t,
//           template<size_t> class T
//         >
// struct accumulate_value
// {
//   static const size_t value = T<index_t>::value
//                             + accumulate_value<index_t-1,T>::value;
// };

// template<template<size_t> class T>
// struct accumulate_value<0,T>
// {
//   static const size_t value = T<0>::value;
// };
